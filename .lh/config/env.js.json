{
    "sourceFile": "config/env.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1636774637346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1636774637346,
            "name": "Commit-0",
            "content": "'use strict';\r\n\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst paths = require('./paths');\r\n\r\n// Make sure that including paths.js after env.js will read .env variables.\r\ndelete require.cache[require.resolve('./paths')];\r\n\r\nconst NODE_ENV = process.env.NODE_ENV;\r\nif (!NODE_ENV) {\r\n  throw new Error(\r\n    'The NODE_ENV environment variable is required but was not specified.'\r\n  );\r\n}\r\n\r\n// https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use\r\nvar dotenvFiles = [\r\n  `${paths.dotenv}.${NODE_ENV}.local`,\r\n  `${paths.dotenv}.${NODE_ENV}`,\r\n  // Don't include `.env.local` for `test` environment\r\n  // since normally you expect tests to produce the same\r\n  // results for everyone\r\n  NODE_ENV !== 'test' && `${paths.dotenv}.local`,\r\n  paths.dotenv,\r\n].filter(Boolean);\r\n\r\n// Load environment variables from .env* files. Suppress warnings using silent\r\n// if this file is missing. dotenv will never modify any environment variables\r\n// that have already been set.  Variable expansion is supported in .env files.\r\n// https://github.com/motdotla/dotenv\r\n// https://github.com/motdotla/dotenv-expand\r\ndotenvFiles.forEach(dotenvFile => {\r\n  if (fs.existsSync(dotenvFile)) {\r\n    require('dotenv-expand')(\r\n      require('dotenv').config({\r\n        path: dotenvFile,\r\n      })\r\n    );\r\n  }\r\n});\r\n\r\n// We support resolving modules according to `NODE_PATH`.\r\n// This lets you use absolute paths in imports inside large monorepos:\r\n// https://github.com/facebook/create-react-app/issues/253.\r\n// It works similar to `NODE_PATH` in Node itself:\r\n// https://nodejs.org/api/modules.html#modules_loading_from_the_global_folders\r\n// Note that unlike in Node, only *relative* paths from `NODE_PATH` are honored.\r\n// Otherwise, we risk importing Node.js core modules into an app instead of Webpack shims.\r\n// https://github.com/facebook/create-react-app/issues/1023#issuecomment-265344421\r\n// We also resolve them to make sure all tools using them work consistently.\r\nconst appDirectory = fs.realpathSync(process.cwd());\r\nprocess.env.NODE_PATH = (process.env.NODE_PATH || '')\r\n  .split(path.delimiter)\r\n  .filter(folder => folder && !path.isAbsolute(folder))\r\n  .map(folder => path.resolve(appDirectory, folder))\r\n  .join(path.delimiter);\r\n\r\n// Grab NODE_ENV and REACT_APP_* environment variables and prepare them to be\r\n// injected into the application via DefinePlugin in Webpack configuration.\r\nconst REACT_APP = /^REACT_APP_/i;\r\nconst REACT_APP_API_HOST = 'http://localhost:8090/';\r\n\r\nfunction getClientEnvironment(publicUrl) {\r\n  const raw = Object.keys(process.env)\r\n    .filter(key => REACT_APP.test(key))\r\n    .reduce(\r\n      (env, key) => {\r\n        env[key] = process.env[key];\r\n        return env;\r\n      },\r\n      {\r\n        // Useful for determining whether weâ€™re running in production mode.\r\n        // Most importantly, it switches React into the correct mode.\r\n        NODE_ENV: process.env.NODE_ENV || 'development',\r\n        // Useful for resolving the correct path to static assets in `public`.\r\n        // For example, <img src={process.env.PUBLIC_URL + '/img/logo.png'} />.\r\n        // This should only be used as an escape hatch. Normally you would put\r\n        // images into the `src` and `import` them in code to get their paths.\r\n        PUBLIC_URL: publicUrl,\r\n      }\r\n    );\r\n  // Stringify all values so we can feed into Webpack DefinePlugin\r\n  const stringified = {\r\n    'process.env': Object.keys(raw).reduce((env, key) => {\r\n      env[key] = JSON.stringify(raw[key]);\r\n      return env;\r\n    }, {}),\r\n  };\r\n\r\n  return { raw, stringified };\r\n}\r\n\r\nmodule.exports = getClientEnvironment;\r\n"
        }
    ]
}