{
    "sourceFile": "src/actions/user.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 30,
            "patches": [
                {
                    "date": 1636774658285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1636774769207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,14 +12,15 @@\n             'Access-Control-Allow-Headers': 'Content-Type',\r\n             'Access-Control-Allow-Origin': 'http://localhost:3000',\r\n             'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'\r\n         },\r\n-        body: JSON.stringify({ title: 'React POST Request Example' })\r\n+        body: JSON.stringify({ username: 'LURM', password: 'password' })\r\n     };\r\n     let response = await fetch(process.env.REACT_APP_API_HOST+\"authenticate/\", requestOptions);\r\n     let token = await response.json();\r\n     this.setState({ ...this.state, payments: response?.length });\r\n     return {\r\n+        token: token,\r\n         type: LOGIN_SUCCESS\r\n     };\r\n }\r\n \r\n"
                },
                {
                    "date": 1636774790130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n export const LOGIN_FAILURE = 'LOGIN_FAILURE';\r\n export const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\r\n export const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\n \r\n-export function receiveLogin() {\r\n+export async function receiveLogin() {\r\n \r\n     const requestOptions = {\r\n         method: 'POST',\r\n         headers: {\r\n"
                },
                {
                    "date": 1636775217545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n             'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'\r\n         },\r\n         body: JSON.stringify({ username: 'LURM', password: 'password' })\r\n     };\r\n-    let response = await fetch(process.env.REACT_APP_API_HOST+\"authenticate/\", requestOptions);\r\n+    let response = await fetch(\"http://localhost:8090/authenticate/\", requestOptions);\r\n     let token = await response.json();\r\n     this.setState({ ...this.state, payments: response?.length });\r\n     return {\r\n         token: token,\r\n"
                },
                {
                    "date": 1636775599784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,18 +9,17 @@\n         method: 'POST',\r\n         headers: {\r\n             'Content-Type': 'application/json',\r\n             'Access-Control-Allow-Headers': 'Content-Type',\r\n-            'Access-Control-Allow-Origin': 'http://localhost:3000',\r\n+            'Access-Control-Allow-Origin': 'http://localhost:3000/',\r\n             'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'\r\n         },\r\n         body: JSON.stringify({ username: 'LURM', password: 'password' })\r\n     };\r\n     let response = await fetch(\"http://localhost:8090/authenticate/\", requestOptions);\r\n     let token = await response.json();\r\n-    this.setState({ ...this.state, payments: response?.length });\r\n     return {\r\n-        token: token,\r\n+        token: token?.token,\r\n         type: LOGIN_SUCCESS\r\n     };\r\n }\r\n \r\n"
                },
                {
                    "date": 1636831412961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n export const LOGIN_FAILURE = 'LOGIN_FAILURE';\r\n export const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\r\n export const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\n \r\n-export async function receiveLogin() {\r\n+export function receiveLogin() {\r\n \r\n     const requestOptions = {\r\n         method: 'POST',\r\n         headers: {\r\n@@ -14,12 +14,14 @@\n             'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'\r\n         },\r\n         body: JSON.stringify({ username: 'LURM', password: 'password' })\r\n     };\r\n-    let response = await fetch(\"http://localhost:8090/authenticate/\", requestOptions);\r\n+    \r\n+    const { loading, data, error } = useOperation('authenticate', { username: 'LURM', password: 'password' });\r\n+    // let response = await fetch(\"http://localhost:8090/authenticate/\", requestOptions);\r\n     let token = await response.json();\r\n     return {\r\n-        token: token?.token,\r\n+        token: data?.token,\r\n         type: LOGIN_SUCCESS\r\n     };\r\n }\r\n \r\n"
                },
                {
                    "date": 1636831420986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\n export const LOGIN_FAILURE = 'LOGIN_FAILURE';\r\n export const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\r\n export const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\n+import { useOperation } from 'react-openapi-client';\r\n \r\n export function receiveLogin() {\r\n \r\n     const requestOptions = {\r\n"
                },
                {
                    "date": 1636831541353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     };\r\n     \r\n     const { loading, data, error } = useOperation('authenticate', { username: 'LURM', password: 'password' });\r\n     // let response = await fetch(\"http://localhost:8090/authenticate/\", requestOptions);\r\n-    let token = await response.json();\r\n+    // let token = await response.json();\r\n     return {\r\n         token: data?.token,\r\n         type: LOGIN_SUCCESS\r\n     };\r\n"
                },
                {
                    "date": 1636832056804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n+import { useOperation } from 'react-openapi-client';\r\n export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\n export const LOGIN_FAILURE = 'LOGIN_FAILURE';\r\n export const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\r\n export const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\n-import { useOperation } from 'react-openapi-client';\r\n \r\n export function receiveLogin() {\r\n \r\n     const requestOptions = {\r\n"
                },
                {
                    "date": 1636832242174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n export function loginUser(creds) {\r\n     return (dispatch) => {\r\n \r\n         dispatch(receiveLogin());\r\n-\r\n+        debugger\r\n         if (creds.email.length > 0 && creds.password.length > 0) {\r\n             localStorage.setItem('authenticated', true)\r\n         } else {\r\n             dispatch(loginError('Something was wrong. Try again'));\r\n"
                },
                {
                    "date": 1636833973721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n export const LOGIN_FAILURE = 'LOGIN_FAILURE';\r\n export const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\r\n export const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\n \r\n-export function receiveLogin() {\r\n+export function useAuthenticate() {\r\n \r\n     const requestOptions = {\r\n         method: 'POST',\r\n         headers: {\r\n@@ -56,9 +56,9 @@\n \r\n export function loginUser(creds) {\r\n     return (dispatch) => {\r\n \r\n-        dispatch(receiveLogin());\r\n+        dispatch(useAuthenticate());\r\n         debugger\r\n         if (creds.email.length > 0 && creds.password.length > 0) {\r\n             localStorage.setItem('authenticated', true)\r\n         } else {\r\n"
                },
                {
                    "date": 1636834491277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n export const LOGIN_FAILURE = 'LOGIN_FAILURE';\r\n export const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\r\n export const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\n \r\n-export function useAuthenticate() {\r\n+export function ReceiveLogin() {\r\n \r\n     const requestOptions = {\r\n         method: 'POST',\r\n         headers: {\r\n@@ -56,9 +56,9 @@\n \r\n export function loginUser(creds) {\r\n     return (dispatch) => {\r\n \r\n-        dispatch(useAuthenticate());\r\n+        dispatch(ReceiveLogin());\r\n         debugger\r\n         if (creds.email.length > 0 && creds.password.length > 0) {\r\n             localStorage.setItem('authenticated', true)\r\n         } else {\r\n"
                },
                {
                    "date": 1636835089765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n export const LOGIN_FAILURE = 'LOGIN_FAILURE';\r\n export const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\r\n export const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\n \r\n-export function ReceiveLogin() {\r\n+export function receiveLogin() {\r\n \r\n     const requestOptions = {\r\n         method: 'POST',\r\n         headers: {\r\n@@ -16,9 +16,8 @@\n         },\r\n         body: JSON.stringify({ username: 'LURM', password: 'password' })\r\n     };\r\n     \r\n-    const { loading, data, error } = useOperation('authenticate', { username: 'LURM', password: 'password' });\r\n     // let response = await fetch(\"http://localhost:8090/authenticate/\", requestOptions);\r\n     // let token = await response.json();\r\n     return {\r\n         token: data?.token,\r\n@@ -56,9 +55,9 @@\n \r\n export function loginUser(creds) {\r\n     return (dispatch) => {\r\n \r\n-        dispatch(ReceiveLogin());\r\n+        dispatch(receiveLogin());\r\n         debugger\r\n         if (creds.email.length > 0 && creds.password.length > 0) {\r\n             localStorage.setItem('authenticated', true)\r\n         } else {\r\n"
                },
                {
                    "date": 1636835243074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,24 +4,9 @@\n export const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\r\n export const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\n \r\n export function receiveLogin() {\r\n-\r\n-    const requestOptions = {\r\n-        method: 'POST',\r\n-        headers: {\r\n-            'Content-Type': 'application/json',\r\n-            'Access-Control-Allow-Headers': 'Content-Type',\r\n-            'Access-Control-Allow-Origin': 'http://localhost:3000/',\r\n-            'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'\r\n-        },\r\n-        body: JSON.stringify({ username: 'LURM', password: 'password' })\r\n-    };\r\n-    \r\n-    // let response = await fetch(\"http://localhost:8090/authenticate/\", requestOptions);\r\n-    // let token = await response.json();\r\n     return {\r\n-        token: data?.token,\r\n         type: LOGIN_SUCCESS\r\n     };\r\n }\r\n \r\n"
                },
                {
                    "date": 1636848619197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,21 @@\n-import { useOperation } from 'react-openapi-client';\r\n+import { PaymentResourceService } from \"../services/openapi/services/PaymentResourceService\";\r\n+\r\n export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\n export const LOGIN_FAILURE = 'LOGIN_FAILURE';\r\n export const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\r\n export const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\n \r\n export function receiveLogin() {\r\n+    PaymentResourceService.paymentsByIUsingPost().then((result) => {\r\n+        setData((data) => {\r\n+            debugger\r\n+            return {\r\n+                token: result.token\r\n+            };\r\n+        });\r\n+\r\n+    });\r\n     return {\r\n         type: LOGIN_SUCCESS\r\n     };\r\n }\r\n"
                },
                {
                    "date": 1636848780919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n export const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\n \r\n export function receiveLogin() {\r\n     PaymentResourceService.paymentsByIUsingPost().then((result) => {\r\n-        setData((data) => {\r\n+        this.setData((data) => {\r\n             debugger\r\n             return {\r\n                 token: result.token\r\n             };\r\n"
                },
                {
                    "date": 1636848843801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import { PaymentResourceService } from \"../services/openapi/services/PaymentResourceService\";\r\n+import React, {useState} from 'react';\r\n \r\n export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\n export const LOGIN_FAILURE = 'LOGIN_FAILURE';\r\n export const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\r\n"
                },
                {
                    "date": 1636850458446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,12 +5,14 @@\n export const LOGIN_FAILURE = 'LOGIN_FAILURE';\r\n export const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\r\n export const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\n \r\n-export function receiveLogin() {\r\n+export function receiveLogin(payload) {\r\n     PaymentResourceService.paymentsByIUsingPost().then((result) => {\r\n         this.setData((data) => {\r\n             debugger\r\n+            \r\n+            localStorage.setItem('authenticated', true)\r\n             return {\r\n                 token: result.token\r\n             };\r\n         });\r\n@@ -50,13 +52,11 @@\n }\r\n \r\n export function loginUser(creds) {\r\n     return (dispatch) => {\r\n-\r\n-        dispatch(receiveLogin());\r\n-        debugger\r\n         if (creds.email.length > 0 && creds.password.length > 0) {\r\n-            localStorage.setItem('authenticated', true)\r\n+            debugger\r\n+            dispatch(receiveLogin(creds));\r\n         } else {\r\n             dispatch(loginError('Something was wrong. Try again'));\r\n         }\r\n     }\r\n"
                },
                {
                    "date": 1636852175799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,30 @@\n import { PaymentResourceService } from \"../services/openapi/services/PaymentResourceService\";\r\n-import React, {useState} from 'react';\r\n+import React, { useState } from 'react';\r\n \r\n export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\n export const LOGIN_FAILURE = 'LOGIN_FAILURE';\r\n export const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\r\n export const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\n \r\n export function receiveLogin(payload) {\r\n-    PaymentResourceService.paymentsByIUsingPost().then((result) => {\r\n-        this.setData((data) => {\r\n-            debugger\r\n-            \r\n-            localStorage.setItem('authenticated', true)\r\n-            return {\r\n-                token: result.token\r\n-            };\r\n-        });\r\n+    const requestOptions = {\r\n+        method: 'POST',\r\n+        headers: {\r\n+            'Content-Type': 'application/json',\r\n+            'Access-Control-Allow-Headers': 'Content-Type',\r\n+            'Access-Control-Allow-Origin': 'http://localhost:3000',\r\n+            'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'\r\n+        },\r\n+        body: JSON.stringify({ title: 'React POST Request Example' })\r\n+    };\r\n+    fetch(\"http://localhost:8090/payment/view/\", requestOptions).then((response) => response.json()).then((response) => {\r\n \r\n-    });\r\n+        debugger\r\n+    \r\n+        localStorage.setItem('authenticated', true)\r\n+    }\r\n+    );\r\n     return {\r\n         type: LOGIN_SUCCESS\r\n     };\r\n }\r\n"
                },
                {
                    "date": 1636852460448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,4 @@\n-import { PaymentResourceService } from \"../services/openapi/services/PaymentResourceService\";\r\n-import React, { useState } from 'react';\r\n-\r\n export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\n export const LOGIN_FAILURE = 'LOGIN_FAILURE';\r\n export const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\r\n export const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\n"
                },
                {
                    "date": 1636853337342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,11 +11,11 @@\n             'Access-Control-Allow-Headers': 'Content-Type',\r\n             'Access-Control-Allow-Origin': 'http://localhost:3000',\r\n             'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'\r\n         },\r\n-        body: JSON.stringify({ title: 'React POST Request Example' })\r\n+        body: JSON.stringify({ username: 'LFUM', password: 'password' })\r\n     };\r\n-    fetch(\"http://localhost:8090/payment/view/\", requestOptions).then((response) => response.json()).then((response) => {\r\n+    fetch(\"http://localhost:8090/authenticate/\", requestOptions).then((response) => response.json()).then((response) => {\r\n \r\n         debugger\r\n     \r\n         localStorage.setItem('authenticated', true)\r\n"
                },
                {
                    "date": 1636901170217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n             'Access-Control-Allow-Headers': 'Content-Type',\r\n             'Access-Control-Allow-Origin': 'http://localhost:3000',\r\n             'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'\r\n         },\r\n-        body: JSON.stringify({ username: 'LFUM', password: 'password' })\r\n+        body: JSON.stringify({ username: 'LURM', password: 'password' })\r\n     };\r\n     fetch(\"http://localhost:8090/authenticate/\", requestOptions).then((response) => response.json()).then((response) => {\r\n \r\n         debugger\r\n"
                },
                {
                    "date": 1636908252170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,15 +13,15 @@\n             'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'\r\n         },\r\n         body: JSON.stringify({ username: 'LURM', password: 'password' })\r\n     };\r\n-    fetch(\"http://localhost:8090/authenticate/\", requestOptions).then((response) => response.json()).then((response) => {\r\n+    // fetch(\"http://localhost:8090/authenticate/\", requestOptions).then((response) => response.json()).then((response) => {\r\n \r\n-        debugger\r\n+    //     debugger\r\n     \r\n-        localStorage.setItem('authenticated', true)\r\n-    }\r\n-    );\r\n+    //     localStorage.setItem('authenticated', true)\r\n+    // }\r\n+    // );\r\n     return {\r\n         type: LOGIN_SUCCESS\r\n     };\r\n }\r\n"
                },
                {
                    "date": 1636909043223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n             'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'\r\n         },\r\n         body: JSON.stringify({ username: 'LURM', password: 'password' })\r\n     };\r\n-    // fetch(\"http://localhost:8090/authenticate/\", requestOptions).then((response) => response.json()).then((response) => {\r\n+    // fetch(\"http://localhost:8090/authenticate\", requestOptions).then((response) => response.json()).then((response) => {\r\n \r\n     //     debugger\r\n     \r\n     //     localStorage.setItem('authenticated', true)\r\n"
                },
                {
                    "date": 1636909070551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,15 +13,15 @@\n             'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'\r\n         },\r\n         body: JSON.stringify({ username: 'LURM', password: 'password' })\r\n     };\r\n-    // fetch(\"http://localhost:8090/authenticate\", requestOptions).then((response) => response.json()).then((response) => {\r\n+    fetch(\"http://localhost:8090/authenticate\", requestOptions).then((response) => response.json()).then((response) => {\r\n \r\n-    //     debugger\r\n+        debugger\r\n     \r\n-    //     localStorage.setItem('authenticated', true)\r\n-    // }\r\n-    // );\r\n+        localStorage.setItem('authenticated', true)\r\n+    }\r\n+    );\r\n     return {\r\n         type: LOGIN_SUCCESS\r\n     };\r\n }\r\n"
                },
                {
                    "date": 1636909333866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n export const LOGIN_FAILURE = 'LOGIN_FAILURE';\r\n export const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\r\n export const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\n \r\n-export function receiveLogin(payload) {\r\n+export async function receiveLogin(payload) {\r\n     const requestOptions = {\r\n         method: 'POST',\r\n         headers: {\r\n             'Content-Type': 'application/json',\r\n@@ -13,17 +13,23 @@\n             'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'\r\n         },\r\n         body: JSON.stringify({ username: 'LURM', password: 'password' })\r\n     };\r\n-    fetch(\"http://localhost:8090/authenticate\", requestOptions).then((response) => response.json()).then((response) => {\r\n+    debugger\r\n+    let response =\r\n+        await fetch(\"http://localhost:8090/authenticate\", requestOptions).then((response) => response.json());\r\n \r\n-        debugger\r\n-    \r\n-        localStorage.setItem('authenticated', true)\r\n+    if (response?.token) {\r\n+        localStorage.setItem('authenticated', true);\r\n+        localStorage.setItem('token', response.token);\r\n+        return {\r\n+            type: LOGIN_SUCCESS\r\n+        };\r\n     }\r\n-    );\r\n+\r\n+    localStorage.setItem('authenticated', false);\r\n     return {\r\n-        type: LOGIN_SUCCESS\r\n+        type: LOGIN_FAILURE\r\n     };\r\n }\r\n \r\n function loginError(payload) {\r\n"
                },
                {
                    "date": 1636910876859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,35 +2,53 @@\n export const LOGIN_FAILURE = 'LOGIN_FAILURE';\r\n export const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\r\n export const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\n \r\n-export async function receiveLogin(payload) {\r\n-    const requestOptions = {\r\n-        method: 'POST',\r\n-        headers: {\r\n-            'Content-Type': 'application/json',\r\n-            'Access-Control-Allow-Headers': 'Content-Type',\r\n-            'Access-Control-Allow-Origin': 'http://localhost:3000',\r\n-            'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'\r\n-        },\r\n-        body: JSON.stringify({ username: 'LURM', password: 'password' })\r\n-    };\r\n-    debugger\r\n-    let response =\r\n-        await fetch(\"http://localhost:8090/authenticate\", requestOptions).then((response) => response.json());\r\n+export function receiveLogin(payload) {\r\n+    return  async dispatch => {\r\n \r\n-    if (response?.token) {\r\n-        localStorage.setItem('authenticated', true);\r\n-        localStorage.setItem('token', response.token);\r\n-        return {\r\n-            type: LOGIN_SUCCESS\r\n-        };\r\n+        function onSuccess(success) {\r\n+            // dispatch({ type: CREATE_USER, payload: success });\r\n+            return {\r\n+                type: LOGIN_SUCCESS\r\n+            };\r\n+        }\r\n+        function onError(error) {\r\n+            // dispatch({ type: ERROR_GENERATED, error });\r\n+            return {\r\n+                type: LOGIN_FAILURE\r\n+            };\r\n+        }\r\n+        try {\r\n+            const requestOptions ={\r\n+                method: 'POST',\r\n+                 headers: {\r\n+                    'Content-Type': 'application/json',\r\n+                    'Access-Control-Allow-Headers': 'Content-Type',\r\n+                    'Access-Control-Allow-Origin': 'http://localhost:3000',\r\n+                    'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'\r\n+                },\r\n+                body: JSON.stringify({ username: 'LURM', password: 'password' })\r\n+            };\r\n+            debugger\r\n+            let response =\r\n+                await fetch(\"http://localhost:8090/authenticate\", requestOptions).then((response) => response.json());\r\n+        \r\n+            if (response?.token) {\r\n+                localStorage.setItem('authenticated', true);\r\n+                localStorage.setItem('token', response.token);\r\n+                return {\r\n+                    type: LOGIN_SUCCESS\r\n+                };\r\n+            }\r\n+        \r\n+            localStorage.setItem('authenticated', false);\r\n+            return ;\r\n+            return onSuccess(success);\r\n+        } catch (error) {\r\n+            return onError(error);\r\n+        }\r\n     }\r\n-\r\n-    localStorage.setItem('authenticated', false);\r\n-    return {\r\n-        type: LOGIN_FAILURE\r\n-    };\r\n }\r\n \r\n function loginError(payload) {\r\n     return {\r\n"
                },
                {
                    "date": 1636910911750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,16 +35,12 @@\n         \r\n             if (response?.token) {\r\n                 localStorage.setItem('authenticated', true);\r\n                 localStorage.setItem('token', response.token);\r\n-                return {\r\n-                    type: LOGIN_SUCCESS\r\n-                };\r\n             }\r\n         \r\n             localStorage.setItem('authenticated', false);\r\n-            return ;\r\n-            return onSuccess(success);\r\n+            return onSuccess(response);\r\n         } catch (error) {\r\n             return onError(error);\r\n         }\r\n     }\r\n"
                },
                {
                    "date": 1636911023743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,26 +3,24 @@\n export const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\r\n export const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\n \r\n export function receiveLogin(payload) {\r\n-    return  async dispatch => {\r\n-\r\n+    return async dispatch => {\r\n+        localStorage.setItem('authenticated', false);\r\n         function onSuccess(success) {\r\n-            // dispatch({ type: CREATE_USER, payload: success });\r\n             return {\r\n                 type: LOGIN_SUCCESS\r\n             };\r\n         }\r\n         function onError(error) {\r\n-            // dispatch({ type: ERROR_GENERATED, error });\r\n             return {\r\n                 type: LOGIN_FAILURE\r\n             };\r\n         }\r\n         try {\r\n-            const requestOptions ={\r\n+            const requestOptions = {\r\n                 method: 'POST',\r\n-                 headers: {\r\n+                headers: {\r\n                     'Content-Type': 'application/json',\r\n                     'Access-Control-Allow-Headers': 'Content-Type',\r\n                     'Access-Control-Allow-Origin': 'http://localhost:3000',\r\n                     'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'\r\n@@ -31,15 +29,13 @@\n             };\r\n             debugger\r\n             let response =\r\n                 await fetch(\"http://localhost:8090/authenticate\", requestOptions).then((response) => response.json());\r\n-        \r\n+\r\n             if (response?.token) {\r\n                 localStorage.setItem('authenticated', true);\r\n                 localStorage.setItem('token', response.token);\r\n             }\r\n-        \r\n-            localStorage.setItem('authenticated', false);\r\n             return onSuccess(response);\r\n         } catch (error) {\r\n             return onError(error);\r\n         }\r\n"
                },
                {
                    "date": 1636911193611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,16 +6,14 @@\n export function receiveLogin(payload) {\r\n     return async dispatch => {\r\n         localStorage.setItem('authenticated', false);\r\n         function onSuccess(success) {\r\n-            return {\r\n-                type: LOGIN_SUCCESS\r\n-            };\r\n+            dispatch(success);\r\n+            return success;\r\n         }\r\n         function onError(error) {\r\n-            return {\r\n-                type: LOGIN_FAILURE\r\n-            };\r\n+            dispatch(error);\r\n+            return error;\r\n         }\r\n         try {\r\n             const requestOptions = {\r\n                 method: 'POST',\r\n@@ -34,11 +32,15 @@\n             if (response?.token) {\r\n                 localStorage.setItem('authenticated', true);\r\n                 localStorage.setItem('token', response.token);\r\n             }\r\n-            return onSuccess(response);\r\n+            return onSuccess({\r\n+                type: LOGIN_SUCCESS\r\n+            });\r\n         } catch (error) {\r\n-            return onError(error);\r\n+            return onError({\r\n+                type: LOGIN_FAILURE\r\n+            });\r\n         }\r\n     }\r\n }\r\n \r\n"
                },
                {
                    "date": 1636926323213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,11 +25,10 @@\n                 },\r\n                 body: JSON.stringify({ username: 'LURM', password: 'password' })\r\n             };\r\n             debugger\r\n-            let response =\r\n-                await fetch(\"http://localhost:8090/authenticate\", requestOptions).then((response) => response.json());\r\n-\r\n+            let response = await fetch(\"http://localhost:8090/authenticate\", requestOptions).then((response) => response.json());\r\n+            console.log(response);\r\n             if (response?.token) {\r\n                 localStorage.setItem('authenticated', true);\r\n                 localStorage.setItem('token', response.token);\r\n             }\r\n"
                }
            ],
            "date": 1636774658285,
            "name": "Commit-0",
            "content": "export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\r\nexport const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\r\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\n\r\nexport function receiveLogin() {\r\n\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Headers': 'Content-Type',\r\n            'Access-Control-Allow-Origin': 'http://localhost:3000',\r\n            'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'\r\n        },\r\n        body: JSON.stringify({ title: 'React POST Request Example' })\r\n    };\r\n    let response = await fetch(process.env.REACT_APP_API_HOST+\"authenticate/\", requestOptions);\r\n    let token = await response.json();\r\n    this.setState({ ...this.state, payments: response?.length });\r\n    return {\r\n        type: LOGIN_SUCCESS\r\n    };\r\n}\r\n\r\nfunction loginError(payload) {\r\n    return {\r\n        type: LOGIN_FAILURE,\r\n        payload,\r\n    };\r\n}\r\n\r\nfunction requestLogout() {\r\n    return {\r\n        type: LOGOUT_REQUEST,\r\n    };\r\n}\r\n\r\nexport function receiveLogout() {\r\n    return {\r\n        type: LOGOUT_SUCCESS,\r\n    };\r\n}\r\n\r\n// Logs the user out\r\nexport function logoutUser() {\r\n    return (dispatch) => {\r\n        dispatch(requestLogout());\r\n        localStorage.removeItem('authenticated');\r\n        dispatch(receiveLogout());\r\n    };\r\n}\r\n\r\nexport function loginUser(creds) {\r\n    return (dispatch) => {\r\n\r\n        dispatch(receiveLogin());\r\n\r\n        if (creds.email.length > 0 && creds.password.length > 0) {\r\n            localStorage.setItem('authenticated', true)\r\n        } else {\r\n            dispatch(loginError('Something was wrong. Try again'));\r\n        }\r\n    }\r\n}\r\n"
        }
    ]
}