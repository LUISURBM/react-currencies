{
    "sourceFile": "src/components/App.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1636848622026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1636848899360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,57 +12,49 @@\n import LayoutComponent from '../components/Layout';\r\n import Login from '../pages/login';\r\n import Register from '../pages/register';\r\n import { logoutUser } from '../actions/user';\r\n-const PrivateRoute = ({ dispatch, component, ...rest }) => {\r\n+const PrivateRoute = ({dispatch, component, ...rest }) => {\r\n     if (!Login.isAuthenticated(JSON.parse(localStorage.getItem('authenticated')))) {\r\n         dispatch(logoutUser());\r\n-        return (<Redirect to=\"/login\" />)\r\n+        return (<Redirect to=\"/login\"/>)\r\n     } else {\r\n         return ( // eslint-disable-line\r\n-            <Route {...rest} render={props => (React.createElement(component, props))} />\r\n+            <Route {...rest} render={props => (React.createElement(component, props))}/>\r\n         );\r\n     }\r\n };\r\n \r\n-const CloseButton = ({ closeToast }) => <i onClick={closeToast} className=\"la la-close notifications-close\" />\r\n+const CloseButton = ({closeToast}) => <i onClick={closeToast} className=\"la la-close notifications-close\"/>\r\n \r\n class App extends React.PureComponent {\r\n+  render() {\r\n+    return (\r\n+        <div>\r\n+            <ToastContainer\r\n+                autoClose={5000}\r\n+                hideProgressBar\r\n+                closeButton={<CloseButton/>}\r\n+            />\r\n+            <HashRouter>\r\n+                <Switch>\r\n+                    <Route path=\"/\" exact render={() => <Redirect to=\"/app/main\"/>}/>\r\n+                    <Route path=\"/app\" exact render={() => <Redirect to=\"/app/main\"/>}/>\r\n+                    <PrivateRoute path=\"/app\" dispatch={this.props.dispatch} component={LayoutComponent}/>\r\n+                    <Route path=\"/register\" exact component={Register}/>\r\n+                    <Route path=\"/login\" exact component={Login}/>\r\n+                    <Route path=\"/error\" exact component={ErrorPage}/>\r\n+                    <Route component={ErrorPage}/>\r\n+                    <Redirect from=\"*\" to=\"/app/main/dashboard\"/>\r\n+                </Switch>\r\n+            </HashRouter>\r\n+        </div>\r\n \r\n-    render() {\r\n-\r\n-        useEffect(() => {\r\n-            viewgetTodos()\r\n-                .then((allTodos) => setTodos(allTodos))\r\n-                .catch((error) => setError(error));\r\n-        }, []);\r\n-\r\n-        return (\r\n-            <div>\r\n-                <ToastContainer\r\n-                    autoClose={5000}\r\n-                    hideProgressBar\r\n-                    closeButton={<CloseButton />}\r\n-                />\r\n-                <HashRouter>\r\n-                    <Switch>\r\n-                        <Route path=\"/\" exact render={() => <Redirect to=\"/app/main\" />} />\r\n-                        <Route path=\"/app\" exact render={() => <Redirect to=\"/app/main\" />} />\r\n-                        <PrivateRoute path=\"/app\" dispatch={this.props.dispatch} component={LayoutComponent} />\r\n-                        <Route path=\"/register\" exact component={Register} />\r\n-                        <Route path=\"/login\" exact component={Login} />\r\n-                        <Route path=\"/error\" exact component={ErrorPage} />\r\n-                        <Route component={ErrorPage} />\r\n-                        <Redirect from=\"*\" to=\"/app/main/dashboard\" />\r\n-                    </Switch>\r\n-                </HashRouter>\r\n-            </div>\r\n-\r\n-        );\r\n-    }\r\n+    );\r\n+  }\r\n }\r\n \r\n const mapStateToProps = state => ({\r\n-    isAuthenticated: state.auth.isAuthenticated,\r\n+  isAuthenticated: state.auth.isAuthenticated,\r\n });\r\n \r\n export default connect(mapStateToProps)(App);\r\n"
                }
            ],
            "date": 1636848622026,
            "name": "Commit-0",
            "content": "import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Switch, Route, Redirect } from 'react-router';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { ToastContainer } from 'react-toastify';\r\n\r\n/* eslint-disable */\r\nimport ErrorPage from '../pages/error';\r\n/* eslint-enable */\r\n\r\nimport '../styles/theme.scss';\r\nimport LayoutComponent from '../components/Layout';\r\nimport Login from '../pages/login';\r\nimport Register from '../pages/register';\r\nimport { logoutUser } from '../actions/user';\r\nconst PrivateRoute = ({ dispatch, component, ...rest }) => {\r\n    if (!Login.isAuthenticated(JSON.parse(localStorage.getItem('authenticated')))) {\r\n        dispatch(logoutUser());\r\n        return (<Redirect to=\"/login\" />)\r\n    } else {\r\n        return ( // eslint-disable-line\r\n            <Route {...rest} render={props => (React.createElement(component, props))} />\r\n        );\r\n    }\r\n};\r\n\r\nconst CloseButton = ({ closeToast }) => <i onClick={closeToast} className=\"la la-close notifications-close\" />\r\n\r\nclass App extends React.PureComponent {\r\n\r\n    render() {\r\n\r\n        useEffect(() => {\r\n            viewgetTodos()\r\n                .then((allTodos) => setTodos(allTodos))\r\n                .catch((error) => setError(error));\r\n        }, []);\r\n\r\n        return (\r\n            <div>\r\n                <ToastContainer\r\n                    autoClose={5000}\r\n                    hideProgressBar\r\n                    closeButton={<CloseButton />}\r\n                />\r\n                <HashRouter>\r\n                    <Switch>\r\n                        <Route path=\"/\" exact render={() => <Redirect to=\"/app/main\" />} />\r\n                        <Route path=\"/app\" exact render={() => <Redirect to=\"/app/main\" />} />\r\n                        <PrivateRoute path=\"/app\" dispatch={this.props.dispatch} component={LayoutComponent} />\r\n                        <Route path=\"/register\" exact component={Register} />\r\n                        <Route path=\"/login\" exact component={Login} />\r\n                        <Route path=\"/error\" exact component={ErrorPage} />\r\n                        <Route component={ErrorPage} />\r\n                        <Redirect from=\"*\" to=\"/app/main/dashboard\" />\r\n                    </Switch>\r\n                </HashRouter>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n});\r\n\r\nexport default connect(mapStateToProps)(App);\r\n"
        }
    ]
}